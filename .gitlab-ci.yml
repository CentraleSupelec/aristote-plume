cache:
  key:
    files:
      - webapp/composer.lock
      - backend/requirements.txt
    prefix: "${CI_COMMIT_REF_SLUG}"
  paths:
    - webapp/node_modules/
    - webapp/vendor/
    - backend/.venv/
    - backend/__pycache__/
    - ~/.cache/pip/

stages:
  - tests
  - build
  - images_scan

.php_test_template: &php_test_template
  stage: tests
  image: illuin/symfony-ready:8.4-node-22
  tags:
    - docker
  before_script:
    - echo "memory_limit = -1" > /usr/local/etc/php/conf.d/memory.ini
    - cd webapp
    - php /usr/bin/composer install -n
  except:
    - tags

.php_e2e_test_template: &php_e2e_test_template
  <<: *php_test_template
  services:
    - postgres:16
  variables:
    XDEBUG_MODE: coverage
    POSTGRES_USER: test
    POSTGRES_PASSWORD: plume
    POSTGRES_DB: plume-test
    DATABASE_URL: postgresql://test:plume@postgres:5432/plume-test?serverVersion=15&charset=utf8
    LOCK_DSN: postgresql+advisory://test:plume@postgres:5432/plume-test

.python_test_template: &python_test_template
  stage: tests
  image: python:3.12-slim-bookworm
  tags:
    - docker
  before_script:
    - cd backend
    - if [ ! -d ".venv" ]; then python3 -m venv .venv; fi
    - source .venv/bin/activate
    - pip install -r requirements.txt --no-cache-dir
  except:
    - tags

php_cs_fixer:
  <<: *php_test_template
  script:
    - php vendor/bin/php-cs-fixer fix -v --dry-run

rector:
  <<: *php_test_template
  script:
    - php vendor/bin/rector process --dry-run

pylint:
  <<: *python_test_template
  script:
    - pylint src

black:
  <<: *python_test_template
  script:
    - black src --check

php_unit_tests:
  <<: *php_test_template
  script:
    - php vendor/bin/phpunit --testsuite Unit --coverage-text

php_application_tests:
  <<: *php_e2e_test_template
  before_script:
    - echo "memory_limit = -1" > /usr/local/etc/php/conf.d/memory.ini
    - php /usr/bin/composer install -n
    - npm ci
    - npm run build
  script:
    - sh tests/init-test-database.sh
    - php vendor/bin/phpunit --testsuite Application --coverage-text

.kaniko_build_template: &kaniko_build_template
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.23.2-debug
    entrypoint: [ "" ]
  before_script:
    # Login to registry
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${REGISTRY_HOSTNAME}\":{\"username\":\"${REGISTRY_USERNAME}\",\"password\":\"${REGISTRY_PASSWORD}\"}, \"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
  tags:
    - docker
  only:
    - tags
  cache: {}

webapp_build:
  <<: *kaniko_build_template
  script:
    - >
      /kaniko/executor \
        --context ${CI_PROJECT_DIR}/webapp \
        --dockerfile ${CI_PROJECT_DIR}/webapp/docker/nginx/Dockerfile.prod \
        --target assets-prod \
        --destination ${CI_REGISTRY}/disi/innovation/aristote/aristote-storm/webapp-assets:${CI_COMMIT_REF_NAME} \
        --cache-repo=${CI_REGISTRY}/disi/innovation/aristote/aristote-storm/webapp-nginx-cache \
        --cache=true \
        --push-retry 4 \
        --snapshot-mode=redo \
        --use-new-run=true \
        --cleanup
    - >
      /kaniko/executor \
        --context ${CI_PROJECT_DIR}/webapp \
        --dockerfile ${CI_PROJECT_DIR}/webapp/docker/php/Dockerfile \
        --build-arg ASSETS_BUILD=${CI_REGISTRY}/disi/innovation/aristote/aristote-storm/webapp-assets:${CI_COMMIT_REF_NAME} \
        --target php_prod \
        --destination ${REGISTRY_HOSTNAME}/aristote-storm/webapp-php:${CI_COMMIT_REF_NAME} \
        --cache-repo=${CI_REGISTRY}/disi/innovation/aristote/aristote-storm/webapp-php-cache \
        --cache=true \
        --push-retry 4 \
        --snapshot-mode=redo \
        --use-new-run=true \
        --cleanup
    - >
      /kaniko/executor \
        --context ${CI_PROJECT_DIR}/webapp \
        --dockerfile ${CI_PROJECT_DIR}/webapp/docker/nginx/Dockerfile.prod \
        --build-arg PHP_BUILD=${REGISTRY_HOSTNAME}/aristote-storm/webapp-php:${CI_COMMIT_REF_NAME} \
        --target nginx \
        --destination ${REGISTRY_HOSTNAME}/aristote-storm/webapp-nginx:${CI_COMMIT_REF_NAME} \
        --cache-repo=${CI_REGISTRY}/disi/innovation/aristote/aristote-storm/webapp-nginx-cache \
        --cache=true \
        --push-retry 4 \
        --snapshot-mode=redo \
        --use-new-run=true \
        --cleanup

python_api_build:
  <<: *kaniko_build_template
  script:
    - >
      /kaniko/executor \
        --context ${CI_PROJECT_DIR}/backend \
        --dockerfile ${CI_PROJECT_DIR}/backend/docker/Dockerfile \
        --target python_api \
        --destination ${REGISTRY_HOSTNAME}/aristote-storm/python-api:${CI_COMMIT_REF_NAME} \
        --cache=false \
        --push-retry 4 \
        --snapshot-mode=redo \
        --use-new-run=true \
        --cleanup

python_worker_build:
  <<: *kaniko_build_template
  script:
    - >
      /kaniko/executor \
        --context ${CI_PROJECT_DIR}/backend \
        --dockerfile ${CI_PROJECT_DIR}/backend/docker/Dockerfile \
        --target python_worker \
        --destination ${REGISTRY_HOSTNAME}/aristote-storm/python-worker:${CI_COMMIT_REF_NAME} \
        --cache=false \
        --push-retry 4 \
        --snapshot-mode=redo \
        --use-new-run=true \
        --cleanup

docker_images_security:
  stage: images_scan
  image: docker:20
  before_script:
    - mkdir -p ~/.docker
    - echo "{\"auths\":{\"${REGISTRY_HOSTNAME}\":{\"username\":\"${REGISTRY_USERNAME}\",\"password\":\"${REGISTRY_PASSWORD}\"}}}" > ~/.docker/config.json
  script:
    - apk update && apk upgrade && apk add curl
    - curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
    - grype ${REGISTRY_HOSTNAME}/aristote-storm/webapp-php:${CI_COMMIT_REF_NAME}
    - grype ${REGISTRY_HOSTNAME}/aristote-storm/webapp-nginx:${CI_COMMIT_REF_NAME}
    - grype ${REGISTRY_HOSTNAME}/aristote-storm/python-api:${CI_COMMIT_REF_NAME}
    - grype ${REGISTRY_HOSTNAME}/aristote-storm/python-worker:${CI_COMMIT_REF_NAME}
  tags:
    - docker
  only:
    - tags
